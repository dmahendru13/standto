!function r(e, n, t) {
    function o(i, f) {
        if (!n[i]) {
            if (!e[i]) {
                var c = "function" == typeof require && require;
                if (!f && c) return c(i, !0);
                if (u) return u(i, !0);
                var a = new Error("Cannot find module '" + i + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
            }
            var p = n[i] = {
                exports: {}
            };
            e[i][0].call(p.exports, function(r) {
                return o(e[i][1][r] || r);
            }, p, p.exports, r, e, n, t);
        }
        return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
}({
    1: [ function(require, module, exports) {
        "use strict";
        var navbar, Header = require("./modules/Header"), ScrollNav = require("./modules/ScrollNav");
        navbar = document.getElementsByClassName("navbar")[0].parentNode, new Header("menu"), 
        new Header("search"), new ScrollNav(navbar, 150);
    }, {
        "./modules/Header": 2,
        "./modules/ScrollNav": 4
    } ],
    2: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = require("./Helper"), Header = function() {
            function Header(section) {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, Header), this.section = section, this.sectionBtn = document.getElementsByClassName(section + "-button")[0], 
                this.sectionWin = document.getElementsByClassName(section + "-window")[0], this.headerElem = document.getElementsByTagName("header")[0], 
                this.navbtns = document.getElementsByClassName("nav-button"), this.navwins = document.getElementsByClassName("nav-window"), 
                this.sectionBtn.addEventListener("click", this.toggleNavOption.bind(this), !1);
                var len, checkboxes = this.headerElem.querySelectorAll("input[type=checkbox]:checked"), i = 0;
                for (len = checkboxes.length; i < len; i++) checkboxes[i].checked = !1;
            }
            return _createClass(Header, [ {
                key: "toggleNavOption",
                value: function() {
                    var body = document.getElementsByTagName("body")[0], html = document.getElementsByTagName("html")[0], i = 0, sectionOpen = -1 === this.sectionBtn.className.indexOf("close-button");
                    for (i = 0; i < this.navbtns.length; i++) Helper.removeClass(this.navbtns[i], "close-button"), 
                    Helper.removeClass(this.navwins[i], "open-window"), this.navbtns[i].setAttribute("aria-expanded", "false"), 
                    Helper.removeClass(html, "menu-open"), Helper.removeClass(body, "menu-open");
                    sectionOpen && (Helper.addClass(this.sectionBtn, "close-button"), Helper.addClass(this.sectionWin, "open-window"), 
                    this.sectionBtn.setAttribute("aria-expanded", "true"), "search" === this.section ? document.getElementById("usagov-search-query").focus() : (Helper.addClass(html, "menu-open"), 
                    Helper.addClass(body, "menu-open")));
                }
            } ]), Header;
        }();
        exports.default = Header, module.exports = exports.default;
    }, {
        "./Helper": 3
    } ],
    3: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = function() {
            function Helper() {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, Helper);
            }
            return _createClass(Helper, null, [ {
                key: "hasClass",
                value: function(el, className) {
                    return el.classList ? el.classList.contains(className) : !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
                }
            }, {
                key: "addClass",
                value: function(el, className) {
                    el.classList ? el.classList.add(className) : this.hasClass(el, className) || (el.className += " " + className);
                }
            }, {
                key: "removeClass",
                value: function(el, className) {
                    if (el.classList) el.classList.remove(className); else if (this.hasClass(el, className)) {
                        var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
                        el.className = el.className.replace(reg, " ");
                    }
                }
            }, {
                key: "toggleClass",
                value: function(el, className) {
                    this.hasClass(el, className) ? this.removeClass(el, className) : this.addClass(el, className);
                }
            }, {
                key: "randomNumberToken",
                value: function() {
                    return new Date().valueOf();
                }
            } ]), Helper;
        }();
        exports.default = Helper, module.exports = exports.default;
    }, {} ],
    4: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = require("./Helper"), ScrollNav = function() {
            function ScrollNav(elem, minTop) {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, ScrollNav), this.navElem = elem, this.scrollPos = void 0 !== window.pageYOffset ? window.pageYOffset : document.documentElement.scrollTop, 
                this.minTop = minTop || 0, this.minScroll = 25, window.addEventListener("scroll", this.runOnScroll.bind(this)), 
                this.runOnScroll(this);
            }
            return _createClass(ScrollNav, [ {
                key: "runOnScroll",
                value: function(e) {
                    var newPos = void 0 !== window.pageYOffset ? window.pageYOffset : document.documentElement.scrollTop;
                    document.getElementsByClassName("open-window").length || (this.scrollPos + this.minScroll <= newPos && newPos > this.minTop ? (Helper.addClass(this.navElem, "scrolled-down"), 
                    this.scrollPos = newPos) : this.scrollPos - this.minScroll >= newPos && (Helper.removeClass(this.navElem, "scrolled-down"), 
                    this.scrollPos = newPos));
                }
            } ]), ScrollNav;
        }();
        exports.default = ScrollNav, module.exports = exports.default;
    }, {
        "./Helper": 3
    } ],
    5: [ function(require, module, exports) {
        "use strict";
        var Helper = require("./modules/Helper");
        !function() {
            var id, pos, autoScrolling = !1, body = document.body, dist = 0, doc = document.documentElement, increment = 16, lastScrollTop = 0, topBtn = document.getElementsByClassName("top-btn")[0];
            function scrollUp() {
                dist = pos / (-1 * increment), window.scrollBy(0, dist < -1 ? dist : -1.5), 0 < pos ? id = window.requestAnimationFrame(scrollUp) : (window.cancelAnimationFrame(id), 
                window.onwheel = null, window.ontouchmove = null, autoScrolling = !1);
            }
            function preventScroll(e) {
                (e = e || window.event).preventDefault && e.preventDefault();
            }
            window.onscroll = function() {
                pos = body.scrollTop || doc.scrollTop, autoScrolling || (750 <= pos && pos < lastScrollTop ? Helper.addClass(topBtn, "visible") : Helper.removeClass(topBtn, "visible")), 
                lastScrollTop = pos;
            }, topBtn.addEventListener("click", function(e) {
                window.requestAnimationFrame && (e.preventDefault(), Helper.removeClass(topBtn, "visible"), 
                scrollUp(), window.onwheel = preventScroll, window.ontouchmove = preventScroll, 
                autoScrolling = !0);
            }, !1);
        }();
    }, {
        "./modules/Helper": 3
    } ]
}, {}, [ 1, 5 ]), require = function r(e, n, t) {
    function o(i, f) {
        if (!n[i]) {
            if (!e[i]) {
                var c = "function" == typeof require && require;
                if (!f && c) return c(i, !0);
                if (u) return u(i, !0);
                var a = new Error("Cannot find module '" + i + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
            }
            var p = n[i] = {
                exports: {}
            };
            e[i][0].call(p.exports, function(r) {
                return o(e[i][1][r] || r);
            }, p, p.exports, r, e, n, t);
        }
        return n[i].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
}({
    1: [ function(require, module, exports) {
        "use strict";
        var lightbox;
        lightbox = {
            init: function() {
                var margin, lb = $("<div>").prop({
                    id: "lightbox",
                    class: "video"
                }), outer_container = $("<div>").prop({
                    class: "container"
                }), inner_container_wrap = $("<div>").prop({
                    class: "lightbox-outer-video-wrap"
                }), inner_container = $("<div>").prop({
                    class: "lightbox-video-wrap"
                });
                outer_container.append(inner_container_wrap.append(inner_container)), lb.click(function() {
                    lightbox.destroy();
                }), margin = 768 < $(window).width() ? 15 : 0, $("#menu, .hamburger, body").css({
                    "margin-right": margin,
                    overflow: "hidden"
                }), $("body").append(lb.append(outer_container)), lightbox.video();
            },
            destroy: function() {
                $("#lightbox").remove(), $("#menu, .hamburger, body").css({
                    "margin-right": "",
                    overflow: "auto"
                });
            },
            video: function() {
                var w = $("#lightbox .container").width(), iframe = '<iframe width="' + w + '" height="' + Math.floor(9 * w / 16) + '" src="https://www.youtube.com/embed/videoseries?list=PLX7fWuSKiPwic93tI72slYm1IgpZVd1HL&autoplay=1&fs=1&rel=0&hd=1&wmode=opaque&enablejsapi=1" frameborder="0" allowfullscreen></iframe>';
                $("#lightbox .lightbox-video-wrap").append(iframe);
            }
        }, $("#battle_video").on("click", "a", function(e) {
            e.preventDefault(), lightbox.init();
        });
    }, {} ],
    2: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = require("./Helper"), CustomSelect = function() {
            function CustomSelect(el) {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, CustomSelect), this.cselect = el, this.opened = !1, this.createOverlayElement(), 
                this.createOptionsElement(), document.body.addEventListener("click", this.hideOptions.bind(this));
            }
            return _createClass(CustomSelect, [ {
                key: "toggleOptions",
                value: function() {
                    this.opened ? this.opened = !1 : this.opened = !0, Helper.toggleClass(this.cselect, "show-options");
                }
            }, {
                key: "hideOptions",
                value: function(e) {
                    this.opened && "custom-overlay" !== e.target.className && (Helper.removeClass(this.cselect, "show-options"), 
                    this.opened = !1);
                }
            }, {
                key: "createOverlayElement",
                value: function() {
                    var overlay = document.createElement("div");
                    overlay.setAttribute("class", "custom-overlay"), overlay.addEventListener("click", this.toggleOptions.bind(this)), 
                    this.cselect.appendChild(overlay);
                }
            }, {
                key: "createOptionsElement",
                value: function() {
                    var optionLi, i, evt = document.createEvent("HTMLEvents"), select = this.cselect.getElementsByTagName("select")[0], options = this.cselect.getElementsByTagName("option"), optionBox = document.createElement("div"), optionUl = document.createElement("ul");
                    for (optionBox.setAttribute("class", "custom-options"), optionBox.appendChild(optionUl), 
                    i = 0; i < options.length; i++) (optionLi = document.createElement("li")).setAttribute("data-value", options[i].value), 
                    optionLi.setAttribute("class", "custom-select-option"), optionLi.innerHTML = options[i].textContent, 
                    optionLi.addEventListener("click", function() {
                        evt.initEvent("change", !1, !0), select.value = this.getAttribute("data-value"), 
                        select.dispatchEvent(evt);
                    }), optionUl.appendChild(optionLi);
                    this.cselect.appendChild(optionBox);
                }
            } ]), CustomSelect;
        }();
        exports.default = CustomSelect, module.exports = exports.default;
    }, {
        "./Helper": "Helper"
    } ],
    3: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        var Helper = require("./Helper"), FullWidthParallax = function() {
            function FullWidthParallax(elem, topMargin) {
                _classCallCheck(this, FullWidthParallax);
                var fwi, context = this;
                fwi = (this.imgCont = elem).getElementsByClassName("full-width-image"), this.img = fwi.length ? fwi[0].getElementsByTagName("img") : [], 
                this.topVal = 0, this.longPage = !1, this.isBanner = Helper.hasClass(elem, "page-banner"), 
                this.toTop = Helper.hasClass(elem, "image-to-top"), this.centered = 0, this.img.length && (this.img = this.img[0], 
                this.scrollPos = -1, this.topMargin = topMargin || 0, window.addEventListener("scroll", function() {
                    context.runOnScroll();
                }), window.addEventListener("resize", function() {
                    context.runOnResize();
                }), this.img.addEventListener("load", function() {
                    context.runOnResize();
                }), this.runOnResize());
            }
            return _createClass(FullWidthParallax, [ {
                key: "runOnResize",
                value: function() {
                    var maxPos, absTop, minTop, de = document.documentElement;
                    this.imgH = this.img.clientHeight, this.contH = this.imgCont.clientHeight, this.centered = Math.round(this.imgH - this.contH) / -2, 
                    this.winW = Math.max(de.clientWidth, window.innerWidth || 0), this.winH = Math.max(de.clientHeight, window.innerHeight || 0), 
                    (this.toTop || !this.isBanner || 0 <= this.centered) && (this.centered = 0), 769 < this.winW && 0 < this.contH ? (maxPos = this.winH - this.contH, 
                    absTop = Math.round((this.topMargin - maxPos) / 2), minTop = this.contH - this.imgH, 
                    this.longPage = absTop < minTop, this.runOnScroll()) : this.topVal !== this.centered && 0 < this.contH && (this.img.style.top = this.centered + "px", 
                    this.topVal = this.centered);
                }
            }, {
                key: "runOnScroll",
                value: function() {
                    var pPos, minPos, percent, viewPos = this.imgCont.getBoundingClientRect(), imgContPos = this.topMargin - viewPos.top, imgTop = Math.round(imgContPos / 2), minView = this.winH - viewPos.top;
                    this.contH, this.imgH;
                    769 < this.winW && 0 < minView && imgContPos <= this.contH ? (this.longPage && !this.isBanner ? (percent = 100 * (viewPos.top - this.topMargin), 
                    imgTop = (percent /= this.winH - this.contH - this.topMargin) * (this.contH - this.imgH) / 100) : this.isBanner && (pPos = window.pageYOffset || document.documentElement.scrollTop, 
                    minPos = this.topMargin - (pPos + viewPos.top), imgTop -= Math.round(minPos / 2)), 
                    imgTop = (imgTop += this.centered) < this.centered && this.isBanner ? this.centered : imgTop, 
                    this.img.style.top = imgTop + "px", this.topVal = imgTop) : this.topVal !== this.centered && (this.img.style.top = this.centered + "px", 
                    this.topVal = this.centered);
                }
            }, {
                key: "updateParallax",
                value: function() {
                    this.runOnResize();
                }
            } ]), FullWidthParallax;
        }(), ParallaxImage = function() {
            function ParallaxImage(topMargin) {
                _classCallCheck(this, ParallaxImage);
                var i, banners = document.getElementsByClassName("parallax-image");
                for (this.parallaxes = [], i = 0; i < banners.length; i++) this.parallaxes.push(new FullWidthParallax(banners[i], topMargin));
            }
            return _createClass(ParallaxImage, [ {
                key: "runUpdate",
                value: function() {
                    var i;
                    for (i = 0; i < this.parallaxes.length; i++) this.parallaxes[i].updateParallax();
                }
            } ]), ParallaxImage;
        }();
        exports.default = ParallaxImage, module.exports = exports.default;
    }, {
        "./Helper": "Helper"
    } ],
    4: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = require("./Helper"), SubNav = function() {
            function SubNav(el, callbackFn, options) {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, SubNav);
                var i, j, mDiv, hashItem, subnavCheck, menuLink, mItems, _this = this, url = document.URL.split("#")[0], hash = window.location.hash.toLowerCase(), docElem = document.documentElement, winW = Math.max(docElem.clientWidth, window.innerWidth || 0);
                for (this.defaults = this.initDefaults(options), this.callback = callbackFn, this.subnav = el, 
                subnavCheck = this.subnav.getElementsByTagName("input"), mItems = this.subnav.querySelectorAll("ul a"), 
                this.menuItems = {}, this.menuDivs = {}, this.firstHash = "", this.currentSelect = "", 
                this.toggleLabel = this.subnav.getElementsByTagName("label"), 0 < this.toggleLabel.length ? this.toggleLabel = this.toggleLabel[0] : this.toggleLabel = document.createElement("div"), 
                this.toggleLabelDefault = this.toggleLabel.innerHTML, 0 < subnavCheck.length && "checkbox" === subnavCheck[0].type && (subnavCheck = subnavCheck[0], 
                winW <= 992 && (this.defaults.initializeOpen = !1), subnavCheck.checked = this.defaults.initializeOpen), 
                i = 0; i < mItems.length; i++) {
                    for (0 === (mDiv = "" === (menuLink = mItems[i].getAttribute("href").toLowerCase()) ? [] : document.getElementsByClassName(menuLink.substr(1))).length && mItems[i].getAttribute("data-id") ? (mDiv = document.getElementsByClassName(mItems[i].getAttribute("data-id")), 
                    menuLink = "#" + mItems[i].getAttribute("data-id")) : 0 === mDiv.length && mItems[i].id && (mDiv = document.getElementsByClassName(mItems[i].id), 
                    menuLink = "#" + mItems[i].id), menuLink === hash && hash && (hashItem = menuLink), 
                    0 === i && (this.firstHash = menuLink), this.menuItems[menuLink] = mItems[i], this.menuDivs[menuLink] = mDiv, 
                    j = 0; j < mDiv.length; j++) Helper.addClass(mDiv[j], "subnav-selectable");
                    mItems[i].onclick = function(e) {
                        var hashval = this.getAttribute("href"), page = location.pathname + location.search + hashval, linkid = this.getAttribute("data-id") ? this.getAttribute("data-id") : this.id, hashLink = "" === hashval ? "#" + linkid : hashval;
                        _this.defaults.preventDefault && e.preventDefault(), "" === hashval && (hashval = url), 
                        history.pushState && history.pushState(null, document.title, hashval), "undefined" != typeof ga && ga("send", "event", "subnav", "click", page), 
                        _this.setMenu(hashLink), subnavCheck && (subnavCheck.checked = !1);
                    };
                }
                window.addEventListener("hashchange", function(e) {
                    var i, navwins, navcls, body = document.getElementsByTagName("body")[0], html = document.getElementsByTagName("html")[0], nav = document.getElementsByTagName("header");
                    if (_this.setMenu(location.hash, !0), subnavCheck && (subnavCheck.checked = !1), 
                    Helper.removeClass(html, "menu-open"), Helper.removeClass(body, "menu-open"), nav.length) {
                        for (navcls = nav[0].getElementsByClassName("close-button"), navwins = nav[0].getElementsByClassName("open-window"), 
                        i = navcls.length - 1; 0 <= i; i--) Helper.removeClass(navcls[i], "close-button");
                        for (i = navwins.length - 1; 0 <= i; i--) Helper.removeClass(navwins[i], "open-window");
                    }
                }, !1), this.defaults.initializeEmpty ? this.setMenu("empty") : hashItem ? this.setMenu(hashItem) : this.setMenu(this.firstHash);
            }
            return _createClass(SubNav, [ {
                key: "initDefaults",
                value: function(options) {
                    var key, defaults = {
                        preventDefault: !0,
                        persistentLabel: !1,
                        initializeEmpty: !1,
                        initializeOpen: !1
                    };
                    for (key in options) defaults.hasOwnProperty(key) && (defaults[key] = options[key]);
                    return defaults;
                }
            }, {
                key: "setMenu",
                value: function(hashIndex, toTop) {
                    var i, active, selected;
                    if ((this.menuItems[hashIndex] || "empty" === hashIndex) && this.currentSelect !== hashIndex) {
                        for (active = this.subnav.getElementsByClassName("active"), selected = document.getElementsByClassName("subnav-selected"), 
                        i = active.length - 1; 0 <= i; i--) Helper.removeClass(active[i], "active");
                        for (i = selected.length - 1; 0 <= i; i--) Helper.removeClass(selected[i], "subnav-selected");
                        "empty" !== hashIndex && (Helper.addClass(this.menuItems[hashIndex], "active"), 
                        this.menuDivs[hashIndex] ? (this.defaults.persistentLabel || (this.toggleLabel.innerHTML = this.menuItems[hashIndex].innerHTML), 
                        this.showMenuDiv(this.menuDivs[hashIndex], !0), toTop && window.scrollTo(0, 0)) : this.toggleLabel.innerHTML = this.toggleLabelDefault, 
                        "function" == typeof this.callback && this.callback(this.menuItems[hashIndex])), 
                        this.currentSelect = hashIndex;
                    }
                }
            }, {
                key: "showMenuDiv",
                value: function(divs, add) {
                    var i;
                    for (i = divs.length - 1; 0 <= i; i--) !0 === add ? Helper.addClass(divs[i], "subnav-selected") : Helper.removeClass(divs[i], "subnav-selected");
                }
            } ]), SubNav;
        }();
        exports.default = SubNav, module.exports = exports.default;
    }, {
        "./Helper": "Helper"
    } ],
    5: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = require("./Helper"), Validity = function() {
            function Validity(form) {
                var submit = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "", normalSubmit = 2 < arguments.length && void 0 !== arguments[2] && arguments[2];
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, Validity);
                var len, i = 0, $this = this;
                for ($this.validationFn = "function" == typeof form.checkValidity ? function(el) {
                    return el.checkValidity();
                } : function(el) {
                    return $this.isValid(el);
                }, i = 0, len = form.elements.length; i < len; i++) $this.validateOnBlur(form.elements[i]);
                form.validate = function() {
                    var len, j = 0, invalid = 0;
                    for (j = 0, len = this.elements.length; j < len; j++) $this.markField($this.validationFn(this.elements[j]), this.elements[j]) || invalid++;
                    return !(0 < invalid) && (!normalSubmit || void this.submit());
                }, form.onsubmit = submit || function() {
                    if (!this.validate()) return !1;
                };
            }
            return _createClass(Validity, [ {
                key: "validateOnBlur",
                value: function(el) {
                    var $this = this;
                    "checkbox" === el.getAttribute("type") ? el.addEventListener("click", function() {
                        $this.markField($this.validationFn(this), this);
                    }, !1) : el.addEventListener("blur", function() {
                        Helper.hasClass(this, "no-validate") || $this.markField($this.validationFn(this), this);
                    }, !1);
                }
            }, {
                key: "markField",
                value: function(valid, el) {
                    return valid ? (Helper.hasClass(el, "invalid") && Helper.removeClass(el, "invalid"), 
                    !0) : (el.setCustomValidity(""), Helper.addClass(el, "invalid"), !1);
                }
            }, {
                key: "isValid",
                value: function(el) {
                    return "email" === el.getAttribute("type") ? !this.isEmpty(el) && this.validateEmail(el) && !this.isPlaceholder(el) : "tel" === el.getAttribute("type") ? !this.isEmpty(el) && this.validatePhone(el) && !this.isPlaceholder(el) : "url" === el.getAttribute("type") ? !this.isEmpty(el) && this.validateUrl(el) && !this.isPlaceholder(el) : "checkbox" === el.getAttribute("type") ? this.validateCheckbox(el) : !this.isEmpty(el) && !this.isPlaceholder(el);
                }
            }, {
                key: "validateEmail",
                value: function(el) {
                    return /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/.test(el.value);
                }
            }, {
                key: "validatePhone",
                value: function(el) {
                    return /^(?:\(\d{3}\)|\d{3})[- ]?\d{3}[- ]?\d{4}$/.test(el.value);
                }
            }, {
                key: "validateUrl",
                value: function(el) {
                    return /^(https?:\/\/)?(\w+(-\w+)*\.){2,}[a-z]{2,}(:[0-9]+)?(\/[\w\-]+)*(\/([\w\-\x40$\.\x2B!*\x27(),]|(%[A-Z0-9]{2}))+)?((\.[a-z]{2,})|\/)?((\?[\w\-]+=([\w\-\x40$\.\x2B!*\x27(),]|(%[A-Z0-9]{2}))+)(\x26[\w\-]+=([\w\-\x40$\.\x2B!*\x27(),]|(%[A-Z0-9]{2}))+)*)?(#([\w\-\x40$\.\x2B!*\x27(),]|(%[A-Z0-9]{2}))+)?$/gi.test(el.value);
                }
            }, {
                key: "validateCheckbox",
                value: function(el) {
                    return el.checked;
                }
            }, {
                key: "isEmpty",
                value: function(el) {
                    return 0 === el.value.length || !el.value.trim();
                }
            }, {
                key: "isPlaceholder",
                value: function(el) {
                    return el.getAttribute("placeholder") && el.value === el.getAttribute("placeholder");
                }
            } ]), Validity;
        }();
        exports.default = Validity, module.exports = exports.default;
    }, {
        "./Helper": "Helper"
    } ],
    6: [ function(require, module, exports) {
        "use strict";
        var Helper = require("./globals/modules/Helper");
        !function() {
            var i, sidenavs = document.querySelectorAll(".sidenav-container li a");
            if (0 < sidenavs.length) for (new Waypoint({
                element: document.getElementById("nav-bar"),
                handler: function(direction) {
                    "down" === direction ? Helper.addClass(document.getElementById("sidenav"), "show") : Helper.removeClass(document.getElementById("sidenav"), "show");
                },
                offset: 265
            }), i = 0; i < sidenavs.length; i++) {
                waypointSet(sidenavs[i].getElementsByClassName("title")[0].innerText.toLowerCase(), sidenavs[i]);
            }
            function waypointSet(parentId, navElem) {
                new Waypoint({
                    element: document.getElementById(parentId),
                    handler: function(direction) {
                        clearActive(), Helper.addClass(navElem, "active");
                    },
                    offset: "bottom-in-view"
                });
                new Waypoint({
                    element: document.getElementById(parentId),
                    handler: function(direction) {
                        clearActive(), Helper.addClass(navElem, "active");
                    },
                    offset: 68
                });
            }
            function clearActive() {
                for (i = 0; i < sidenavs.length; i++) Helper.removeClass(sidenavs[i], "active");
            }
            $("a[href*=#]:not([href=#])").click(function() {
                if (location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") || location.hostname == this.hostname) {
                    var target = $(this.hash);
                    if ((target = target.length ? target : $("[name=" + this.hash.slice(1) + "]")).length) return $("html,body").animate({
                        scrollTop: target.offset().top
                    }, 1e3), !1;
                }
            });
        }();
    }, {
        "./globals/modules/Helper": "Helper"
    } ],
    7: [ function(require, module, exports) {
        "use strict";
        var items, title, date, link, categories, category, categoryLink, newsItem, months, validCategories, tag, flipCard, pubDate1, pubDate2, header, headerHeight, customSelect, form, newsList, flipButtons, CustomSelect = require("./globals/modules/CustomSelect"), ParallaxImg = require("./globals/modules/ParallaxImage"), Validity = (require("./globals/modules/SubNav"), 
        require("./globals/modules/Validity"));
        require("./side-nav");
        header = document.getElementsByClassName("navbar"), headerHeight = header.length ? header[0].clientHeight : 0, 
        customSelect = document.getElementsByClassName("custom-select"), form = document.getElementById("sm-account-form"), 
        newsList = $(".news-list"), flipButtons = $(".flip-btn"), form && new Validity(document.forms["sm-account-form"], "", !1), 
        new ParallaxImg(headerHeight), 0 < customSelect.length && new CustomSelect(customSelect[0]), 
        0 < newsList.length && (months = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ], 
        validCategories = [ "content", "metrics", "socialmedia" ], $.ajax({
            url: "https://api.army.mil/api/v1/digital/feed",
            dataType: "xml",
            success: function(data) {
                items = (items = (items = $(data).find("item").filter(function(index, item) {
                    return !0;
                })).slice(0, 3)).sort(function(a, b) {
                    return pubDate1 = $(a).find("pubDate").text(), pubDate2 = $(b).find("pubDate").text(), 
                    new Date(pubDate2) - new Date(pubDate1);
                }), $(".empty").remove(), $.each(items, function() {
                    title = $(this).find("title").text(), date = $(this).find("pubDate").text(), $(this).find("description").text(), 
                    link = $(this).find("link").text(), categories = $(this).find("category"), newsItem = "", 
                    newsItem += '<div class="news-item">', newsItem += '<div class="news-inner">', newsItem += '<div class="news-right">', 
                    newsItem += '<div class="main-content">', date = new Date(date), date = months[date.getMonth()] + " " + date.getDate() + ", " + date.getFullYear(), 
                    newsItem += '<p class="date">' + date + "</p>", newsItem += '<p class="sections">', 
                    categories = _.uniq(categories, function(a) {
                        return $(a).text().toLowerCase();
                    }), $.each(categories, function() {
                        category = (category = $(this).text().toLowerCase()).trim().replace(" ", ""), tag = "", 
                        -1 < validCategories.indexOf(category) && (categoryLink = category.trim().replace(" ", ""), 
                        "socialmedia" === category && (category = "Social Media"), tag = '<a href="https://www.digitalgov.gov/category/' + categoryLink + '">' + category + "</a>"), 
                        newsItem += tag;
                    }), newsItem += "</p>", newsItem += '<p class="title"><a title="' + title + '" href="' + link + '">' + title + "</a></p>", 
                    newsItem += "</div>", newsItem += '<p class="more"><a title="' + title + '" href="' + link + '">READ MORE</a></p>', 
                    newsItem += "</div>", newsItem += "</div>", newsItem += "</div>", newsList.append(newsItem);
                });
            }
        })), 0 < flipButtons.length && $(flipButtons).each(function(index) {
            $(this).on("click", function() {
                flipCard = $(this).parent().parent().parent(), $(flipCard).hasClass("applyflip") ? $(flipCard).removeClass("applyflip") : $(flipCard).addClass("applyflip");
            });
        });
    }, {
        "./globals/modules/CustomSelect": 2,
        "./globals/modules/ParallaxImage": 3,
        "./globals/modules/SubNav": 4,
        "./globals/modules/Validity": 5,
        "./side-nav": 6
    } ],
    8: [ function(require, module, exports) {}, {} ],
    Helper: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: !0
        });
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 
                    "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function(Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), 
                Constructor;
            };
        }();
        var Helper = function() {
            function Helper() {
                !function(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }(this, Helper);
            }
            return _createClass(Helper, null, [ {
                key: "hasClass",
                value: function(el, className) {
                    return el.classList ? el.classList.contains(className) : !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
                }
            }, {
                key: "addClass",
                value: function(el, className) {
                    el.classList ? el.classList.add(className) : this.hasClass(el, className) || (el.className += " " + className);
                }
            }, {
                key: "removeClass",
                value: function(el, className) {
                    if (el.classList) el.classList.remove(className); else if (this.hasClass(el, className)) {
                        var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
                        el.className = el.className.replace(reg, " ");
                    }
                }
            }, {
                key: "toggleClass",
                value: function(el, className) {
                    this.hasClass(el, className) ? this.removeClass(el, className) : this.addClass(el, className);
                }
            }, {
                key: "randomNumberToken",
                value: function() {
                    return new Date().valueOf();
                }
            } ]), Helper;
        }();
        exports.default = Helper, module.exports = exports.default;
    }, {} ],
    Nav: [ function(require, module, exports) {
        "use strict";
        var Subnav = require("./modules/SubNav"), Helper = require("./modules/Helper");
        !function() {
            var i, navs = document.getElementsByTagName("nav");
            for (i = 0; i < navs.length; i++) Helper.hasClass(navs[i], "dropdown") ? new Subnav(navs[i], !1, {
                persistentLabel: !0
            }) : new Subnav(navs[i]);
        }();
    }, {
        "./modules/Helper": "Helper",
        "./modules/SubNav": 4
    } ],
    Waypoints: [ function(require, module, exports) {
        !function() {
            "use strict";
            var keyCounter = 0, allWaypoints = {};
            function Waypoint(options) {
                if (!options) throw new Error("No options passed to Waypoint constructor");
                if (!options.element) throw new Error("No element option passed to Waypoint constructor");
                if (!options.handler) throw new Error("No handler option passed to Waypoint constructor");
                this.key = "waypoint-" + keyCounter, this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options), 
                this.element = this.options.element, this.adapter = new Waypoint.Adapter(this.element), 
                this.callback = options.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", 
                this.enabled = this.options.enabled, this.triggerPoint = null, this.group = Waypoint.Group.findOrCreate({
                    name: this.options.group,
                    axis: this.axis
                }), this.context = Waypoint.Context.findOrCreateByElement(this.options.context), 
                Waypoint.offsetAliases[this.options.offset] && (this.options.offset = Waypoint.offsetAliases[this.options.offset]), 
                this.group.add(this), this.context.add(this), allWaypoints[this.key] = this, keyCounter += 1;
            }
            Waypoint.prototype.queueTrigger = function(direction) {
                this.group.queueTrigger(this, direction);
            }, Waypoint.prototype.trigger = function(args) {
                this.enabled && this.callback && this.callback.apply(this, args);
            }, Waypoint.prototype.destroy = function() {
                this.context.remove(this), this.group.remove(this), delete allWaypoints[this.key];
            }, Waypoint.prototype.disable = function() {
                return this.enabled = !1, this;
            }, Waypoint.prototype.enable = function() {
                return this.context.refresh(), this.enabled = !0, this;
            }, Waypoint.prototype.next = function() {
                return this.group.next(this);
            }, Waypoint.prototype.previous = function() {
                return this.group.previous(this);
            }, Waypoint.invokeAll = function(method) {
                var allWaypointsArray = [];
                for (var waypointKey in allWaypoints) allWaypointsArray.push(allWaypoints[waypointKey]);
                for (var i = 0, end = allWaypointsArray.length; i < end; i++) allWaypointsArray[i][method]();
            }, Waypoint.destroyAll = function() {
                Waypoint.invokeAll("destroy");
            }, Waypoint.disableAll = function() {
                Waypoint.invokeAll("disable");
            }, Waypoint.enableAll = function() {
                for (var waypointKey in Waypoint.Context.refreshAll(), allWaypoints) allWaypoints[waypointKey].enabled = !0;
                return this;
            }, Waypoint.refreshAll = function() {
                Waypoint.Context.refreshAll();
            }, Waypoint.viewportHeight = function() {
                return window.innerHeight || document.documentElement.clientHeight;
            }, Waypoint.viewportWidth = function() {
                return document.documentElement.clientWidth;
            }, Waypoint.adapters = [], Waypoint.defaults = {
                context: window,
                continuous: !0,
                enabled: !0,
                group: "default",
                horizontal: !1,
                offset: 0
            }, Waypoint.offsetAliases = {
                "bottom-in-view": function() {
                    return this.context.innerHeight() - this.adapter.outerHeight();
                },
                "right-in-view": function() {
                    return this.context.innerWidth() - this.adapter.outerWidth();
                }
            }, window.Waypoint = Waypoint;
        }();
    }, {} ]
}, {}, [ 7, 1, 6, 8 ]);